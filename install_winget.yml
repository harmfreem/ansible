---
- name: Diagnose Winget Installation Issues
  hosts: windows
  gather_facts: yes

  tasks:
    - name: Check if Winget is accessible (Initial check)
      win_shell: "Get-Command winget.exe -ErrorAction SilentlyContinue"
      register: winget_initial_check
      ignore_errors: true
      # Залишимо це завдання, щоб бачити початковий статус

    - name: Get detailed AppxPackage log for recent deployment activities
      # Цей таск спробує отримати детальний лог останньої операції Add-AppxPackage.
      # ActivityID може змінюватися, тому ми беремо останній лог.
      win_shell: |
        Get-AppxPackage -Name "Microsoft.DesktopAppInstaller" | Select-Object -ExpandProperty InstallLocation | Out-Null # Ensure AppInstaller is visible if installed
        Get-AppxLog -ActivityID (Get-AppxLog | Select-Object -First 1 -ExpandProperty ActivityID) | Format-List -Force
      register: appx_log_output
      ignore_errors: true # Ігноруємо помилки, якщо логи недоступні
      # Важливо: Ansible виведе цей лог у JSON-форматі, його потрібно буде уважно переглянути.

    - name: Display AppxPackage Diagnostic Log
      ansible.builtin.debug:
        msg: "Full AppxPackage Log (look for 'Fail', 'Error', 'HRESULT'):\n{{ appx_log_output.stdout }}"
      when: appx_log_output.stdout is defined and appx_log_output.stdout | length > 0

    - name: Check if Microsoft.DesktopAppInstaller is installed
      win_shell: "Get-AppxPackage -Name 'Microsoft.DesktopAppInstaller'"
      register: appinstaller_package_check
      ignore_errors: true

    - name: Display Microsoft.DesktopAppInstaller package status
      ansible.builtin.debug:
        msg: "Microsoft.DesktopAppInstaller status:\n{{ appinstaller_package_check.stdout }}"
      when: appinstaller_package_check.stdout is defined and appinstaller_package_check.stdout | length > 0

    - name: Check if Microsoft.VCLibs.140.00.UWPDesktop is installed
      win_shell: "Get-AppxPackage -Name 'Microsoft.VCLibs.140.00.UWPDesktop'"
      register: vclibs_package_check
      ignore_errors: true

    - name: Display Microsoft.VCLibs.140.00.UWPDesktop package status
      ansible.builtin.debug:
        msg: "Microsoft.VCLibs.140.00.UWPDesktop status:\n{{ vclibs_package_check.stdout }}"
      when: vclibs_package_check.stdout is defined and vclibs_package_check.stdout | length > 0

    - name: Check if Microsoft.UI.Xaml.2.8 is installed
      win_shell: "Get-AppxPackage -Name 'Microsoft.UI.Xaml.2.8'"
      register: uixaml_package_check
      ignore_errors: true

    - name: Display Microsoft.UI.Xaml.2.8 package status
      ansible.builtin.debug:
        msg: "Microsoft.UI.Xaml.2.8 status:\n{{ uixaml_package_check.stdout }}"
      when: uixaml_package_check.stdout is defined and uixaml_package_check.stdout | length > 0

    - name: Final Winget Accessibility Check
      win_shell: "Get-Command winget.exe -ErrorAction SilentlyContinue"
      register: winget_final_check
      ignore_errors: true

    - name: Report final Winget status
      ansible.builtin.debug:
        msg: "Final Winget status: {{ 'Accessible' if winget_final_check.rc == 0 else 'Not recognized in PATH' }}"

    - name: 'Important Note: Manual investigation might still be necessary'
      ansible.builtin.debug:
        msg: "If Winget is still not recognized, please carefully review the 'Full AppxPackage Log' output above for specific error codes or messages. This indicates a deeper Windows OS issue."
      when: winget_final_check.rc != 0
